{"ast":null,"code":"import axios from 'axios';\nexport default class AnimeService {\n  constructor() {\n    this._apiBase = 'https://shikimori.one/api';\n\n    this.getResource = async (url, config = {}) => {\n      return (await axios.get(`${this._apiBase}${url}`, {\n        params: config\n      })).data;\n    };\n\n    this.getOngoings = async num => {\n      const config = {\n        status: \"ongoing\",\n        order: \"ranked\",\n        limit: num\n      };\n      let res = await this.getResource('/animes/', config);\n      res = await Promise.all(res.map(this._transformAnime));\n      return res;\n    };\n\n    this.getRandomCharacters = async num => {\n      const idArray = [];\n      const characters = [];\n      let i = 0;\n\n      while (i < num) {\n        const id = Math.floor(Math.random() * 100000);\n        if (id in idArray) continue;else {\n          idArray.push(id);\n\n          try {\n            const res = await this.getResource(`/characters/${id}`);\n            characters.push(res);\n          } catch {\n            console.log(\"mistake\");\n            continue;\n          }\n\n          i = i + 1;\n        }\n      }\n\n      return characters.map(this._transformCharacter);\n    };\n\n    this._transformAnime = async anime => {\n      const {\n        description\n      } = await this.getResource(`/animes/${anime.id}`);\n      return { ...anime,\n        image: \"https://shikimori.one\" + anime.image.original,\n        description\n      };\n    };\n\n    this._transformCharacter = character => {\n      return {\n        id: character.id,\n        russian: character.russian,\n        image: \"https://shikimori.one\" + character.image.original\n      };\n    };\n  }\n\n}","map":{"version":3,"sources":["/Users/aleksandrgolomazov/anime_project/src/services/anime-service.js"],"names":["axios","AnimeService","_apiBase","getResource","url","config","get","params","data","getOngoings","num","status","order","limit","res","Promise","all","map","_transformAnime","getRandomCharacters","idArray","characters","i","id","Math","floor","random","push","console","log","_transformCharacter","anime","description","image","original","character","russian"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,eAAe,MAAMC,YAAN,CAAmB;AAAA;AAAA,SAC9BC,QAD8B,GACnB,2BADmB;;AAAA,SAE9BC,WAF8B,GAEhB,OAAOC,GAAP,EAAYC,MAAM,GAAG,EAArB,KAA4B;AACtC,aAAO,CAAC,MAAML,KAAK,CAACM,GAAN,CAAW,GAAE,KAAKJ,QAAS,GAAEE,GAAI,EAAjC,EAAoC;AAAEG,QAAAA,MAAM,EAAEF;AAAV,OAApC,CAAP,EAAgEG,IAAvE;AACH,KAJ6B;;AAAA,SAM9BC,WAN8B,GAMhB,MAAOC,GAAP,IAAe;AACzB,YAAML,MAAM,GAAG;AAAEM,QAAAA,MAAM,EAAE,SAAV;AAAqBC,QAAAA,KAAK,EAAE,QAA5B;AAAsCC,QAAAA,KAAK,EAAEH;AAA7C,OAAf;AACA,UAAII,GAAG,GAAG,MAAM,KAAKX,WAAL,CAAiB,UAAjB,EAA6BE,MAA7B,CAAhB;AACAS,MAAAA,GAAG,GAAG,MAAMC,OAAO,CAACC,GAAR,CAAYF,GAAG,CAACG,GAAJ,CAAQ,KAAKC,eAAb,CAAZ,CAAZ;AACA,aAAOJ,GAAP;AACH,KAX6B;;AAAA,SAa9BK,mBAb8B,GAaR,MAAOT,GAAP,IAAe;AACjC,YAAMU,OAAO,GAAG,EAAhB;AACA,YAAMC,UAAU,GAAG,EAAnB;AACA,UAAIC,CAAC,GAAG,CAAR;;AACA,aAAOA,CAAC,GAAGZ,GAAX,EAAgB;AACZ,cAAMa,EAAE,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,MAA3B,CAAX;AACA,YAAIH,EAAE,IAAIH,OAAV,EAAmB,SAAnB,KACK;AACDA,UAAAA,OAAO,CAACO,IAAR,CAAaJ,EAAb;;AACA,cAAI;AACA,kBAAMT,GAAG,GAAG,MAAM,KAAKX,WAAL,CAAkB,eAAcoB,EAAG,EAAnC,CAAlB;AACAF,YAAAA,UAAU,CAACM,IAAX,CAAgBb,GAAhB;AACH,WAHD,CAIA,MAAM;AACFc,YAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACA;AACH;;AACDP,UAAAA,CAAC,GAAGA,CAAC,GAAG,CAAR;AACH;AACJ;;AACD,aAAOD,UAAU,CAACJ,GAAX,CAAe,KAAKa,mBAApB,CAAP;AACH,KAlC6B;;AAAA,SAoC9BZ,eApC8B,GAoCZ,MAAOa,KAAP,IAAiB;AAC/B,YAAM;AAAEC,QAAAA;AAAF,UAAkB,MAAM,KAAK7B,WAAL,CAAkB,WAAU4B,KAAK,CAACR,EAAG,EAArC,CAA9B;AACA,aAAO,EACH,GAAGQ,KADA;AAEHE,QAAAA,KAAK,EAAE,0BAA0BF,KAAK,CAACE,KAAN,CAAYC,QAF1C;AAGHF,QAAAA;AAHG,OAAP;AAKH,KA3C6B;;AAAA,SA6C9BF,mBA7C8B,GA6CPK,SAAD,IAAe;AACjC,aAAO;AACHZ,QAAAA,EAAE,EAAEY,SAAS,CAACZ,EADX;AAEHa,QAAAA,OAAO,EAAED,SAAS,CAACC,OAFhB;AAGHH,QAAAA,KAAK,EAAE,0BAA0BE,SAAS,CAACF,KAAV,CAAgBC;AAH9C,OAAP;AAKH,KAnD6B;AAAA;;AAAA","sourcesContent":["import axios from 'axios';\n\nexport default class AnimeService {\n    _apiBase = 'https://shikimori.one/api';\n    getResource = async (url, config = {}) => {\n        return (await axios.get(`${this._apiBase}${url}`, { params: config })).data;\n    }\n\n    getOngoings = async (num) => {\n        const config = { status: \"ongoing\", order: \"ranked\", limit: num };\n        let res = await this.getResource('/animes/', config);\n        res = await Promise.all(res.map(this._transformAnime));\n        return res;\n    }\n    //30735 creates the mistake \n    getRandomCharacters = async (num) => {\n        const idArray = [];\n        const characters = [];\n        let i = 0;\n        while (i < num) {\n            const id = Math.floor(Math.random() * 100000);\n            if (id in idArray) continue\n            else {\n                idArray.push(id)\n                try {\n                    const res = await this.getResource(`/characters/${id}`);\n                    characters.push(res);\n                }\n                catch {\n                    console.log(\"mistake\")\n                    continue\n                }\n                i = i + 1;\n            }\n        }\n        return characters.map(this._transformCharacter)\n    }\n\n    _transformAnime = async (anime) => {\n        const { description } = await this.getResource(`/animes/${anime.id}`)\n        return {\n            ...anime,\n            image: \"https://shikimori.one\" + anime.image.original,\n            description\n        }\n    }\n\n    _transformCharacter = (character) => {\n        return {\n            id: character.id,\n            russian: character.russian,\n            image: \"https://shikimori.one\" + character.image.original\n        }\n    }\n}"]},"metadata":{},"sourceType":"module"}