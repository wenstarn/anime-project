{"ast":null,"code":"var _jsxFileName = \"/Users/aleksandrgolomazov/anime_project/src/components/anime-list/anime-list.js\";\nimport React, { Component } from \"react\";\nimport './anime-list.css';\nimport AnimeListItem from \"../anime-list-item\";\nimport { connect } from \"react-redux\";\nimport withAnimeService from \"../hoc\";\nimport * as actions from '../../actions';\nimport { withRouter } from \"react-router\";\nimport * as qs from 'qs';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AnimeList = ({\n  animes\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"ul\", {\n    className: \"anime-list\",\n    children: animes.map(anime => {\n      return /*#__PURE__*/_jsxDEV(\"li\", {\n        children: /*#__PURE__*/_jsxDEV(AnimeListItem, {\n          title: anime.name,\n          image: anime.image,\n          id: anime.id\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 29\n        }, this)\n      }, anime.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 25\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 9\n  }, this);\n};\n\n_c = AnimeList;\n\nclass AnimeListContainer extends Component {\n  componentDidMount() {\n    console.log('DIDMOUNT');\n    console.log(this.props.location);\n    this.props.animeListRequested();\n    this.searchCheck();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.location !== prevProps.location) {\n      const {\n        search\n      } = qs.parse(this.props.location.search, {\n        ignoreQueryPrefix: true\n      });\n      this.props.animeListRequested();\n      this.searchCheck();\n    }\n  }\n\n  searchCheck() {\n    const {\n      search\n    } = qs.parse(this.props.location.search, {\n      ignoreQueryPrefix: true\n    });\n\n    if (search) {\n      this.props.animeService.searchAnimes(search, 30).then(res => this.props.animeListLoaded(res));\n      window.removeEventListener('scroll', this.scroll, false);\n    } else {\n      this.props.animeService.getOngoings(14).then(res => this.props.animeListLoaded(res));\n      window.addEventListener('scroll', this.scroll, false);\n    }\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('scroll', this.scroll, false);\n  }\n\n  scroll() {\n    var block = document.querySelector('.anime-list');\n    var contentHeight = block.offsetHeight; // 1) высота блока контента вместе с границами\n\n    var yOffset = window.pageYOffset; // 2) текущее положение скролбара\n\n    var window_height = window.innerHeight; // 3) высота внутренней области окна документа\n\n    var y = yOffset + window_height; // если пользователь достиг конца\n\n    if (y >= contentHeight) {\n      console.log(this.props.animeListAnimesRequested());\n      this.props.animeListAnimesRequested();\n      this.animeService.getAdditionalOngoings(this.props.page).then(res => this.props.animeListAnimesLoaded(res)); //загружаем новое содержимое в элемент\n\n      console.log(\"hello scroll\");\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(AnimeList, {\n      animes: this.props.animes\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 16\n    }, this);\n  }\n\n}\n\nconst mapStatetoProps = ({\n  animeList: {\n    animes,\n    loading,\n    error,\n    page\n  }\n}) => {\n  return {\n    animes,\n    loading,\n    error,\n    page\n  };\n};\n\nexport default withRouter(withAnimeService()(connect(mapStatetoProps, actions)(AnimeListContainer)));\n\nvar _c;\n\n$RefreshReg$(_c, \"AnimeList\");","map":{"version":3,"sources":["/Users/aleksandrgolomazov/anime_project/src/components/anime-list/anime-list.js"],"names":["React","Component","AnimeListItem","connect","withAnimeService","actions","withRouter","qs","AnimeList","animes","map","anime","name","image","id","AnimeListContainer","componentDidMount","console","log","props","location","animeListRequested","searchCheck","componentDidUpdate","prevProps","search","parse","ignoreQueryPrefix","animeService","searchAnimes","then","res","animeListLoaded","window","removeEventListener","scroll","getOngoings","addEventListener","componentWillUnmount","block","document","querySelector","contentHeight","offsetHeight","yOffset","pageYOffset","window_height","innerHeight","y","animeListAnimesRequested","getAdditionalOngoings","page","animeListAnimesLoaded","render","mapStatetoProps","animeList","loading","error"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport './anime-list.css';\nimport AnimeListItem from \"../anime-list-item\";\nimport { connect } from \"react-redux\";\nimport withAnimeService from \"../hoc\";\nimport * as actions from '../../actions'\nimport { withRouter } from \"react-router\";\nimport * as qs from 'qs';\n\n\nconst AnimeList = ({ animes }) => {\n    return (\n        <ul className=\"anime-list\">\n            {\n                animes.map((anime) => {\n                    return (\n                        <li key={anime.id} >\n                            <AnimeListItem title={anime.name} image={anime.image} id={anime.id} />\n                        </li>\n                    )\n                })\n            }\n        </ul>\n    )\n}\n\nclass AnimeListContainer extends Component {\n\n    componentDidMount() {\n        console.log('DIDMOUNT')\n        console.log(this.props.location)\n        this.props.animeListRequested()\n        this.searchCheck()\n    }\n\n    componentDidUpdate(prevProps) {\n        if (this.props.location !== prevProps.location) {\n            const { search } = (qs.parse(this.props.location.search, { ignoreQueryPrefix: true }))\n            this.props.animeListRequested()\n            this.searchCheck()\n        }\n    }\n\n    searchCheck() {\n        const { search } = (qs.parse(this.props.location.search, { ignoreQueryPrefix: true }))\n        if (search) {\n            this.props.animeService.searchAnimes(search, 30).then(res => this.props.animeListLoaded(res))\n            window.removeEventListener('scroll', this.scroll, false)\n        }\n        else {\n            this.props.animeService.getOngoings(14).then(res => this.props.animeListLoaded(res))\n            window.addEventListener('scroll', this.scroll, false)\n\n        }\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('scroll', this.scroll, false)\n    }\n\n    scroll() {\n        var block = document.querySelector('.anime-list');\n\n\n        var contentHeight = block.offsetHeight;      // 1) высота блока контента вместе с границами\n        var yOffset = window.pageYOffset;      // 2) текущее положение скролбара\n        var window_height = window.innerHeight;      // 3) высота внутренней области окна документа\n        var y = yOffset + window_height;\n\n        // если пользователь достиг конца\n        if (y >= contentHeight) {\n            console.log(this.props.animeListAnimesRequested())\n            this.props.animeListAnimesRequested()\n            this.animeService.getAdditionalOngoings(this.props.page).then(res => this.props.animeListAnimesLoaded(res))\n            //загружаем новое содержимое в элемент\n            console.log(\"hello scroll\")\n        }\n    }\n    render() {\n        return <AnimeList animes={this.props.animes} />\n    }\n\n}\n\nconst mapStatetoProps = ({ animeList: { animes, loading, error, page } }) => {\n    return { animes, loading, error, page };\n};\n\nexport default withRouter(withAnimeService()(connect(mapStatetoProps, actions)(AnimeListContainer)))"]},"metadata":{},"sourceType":"module"}