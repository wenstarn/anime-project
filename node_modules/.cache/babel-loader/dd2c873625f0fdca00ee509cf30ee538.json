{"ast":null,"code":"var _jsxFileName = \"/Users/aleksandrgolomazov/anime_project/src/components/anime-list/anime-list.js\";\nimport React, { Component } from \"react\";\nimport './anime-list.css';\nimport AnimeListItem from \"../anime-list-item\";\nimport { connect } from \"react-redux\";\nimport withAnimeService from \"../hoc\";\nimport * as actions from '../../actions';\nimport { withRouter } from \"react-router\";\nimport * as qs from 'qs';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AnimeList = ({\n  animes\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"ul\", {\n    className: \"book-list\",\n    children: animes.map(anime => {\n      return /*#__PURE__*/_jsxDEV(\"li\", {\n        children: /*#__PURE__*/_jsxDEV(AnimeListItem, {\n          title: anime.name,\n          image: anime.image,\n          id: anime.id\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 29\n        }, this)\n      }, anime.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 25\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 9\n  }, this);\n};\n\n_c = AnimeList;\n\nclass AnimeListContainer extends Component {\n  componentDidMount() {\n    console.log('DIDMOUNT');\n    console.log(this.props.location);\n    this.props.ongoingsRequested();\n    const {\n      search\n    } = qs.parse(this.props.location.search, {\n      ignoreQueryPrefix: true\n    });\n\n    if (search) {\n      this.props.animeService.searchAnimes(search, 30).then(res => this.props.ongoingsLoaded(res));\n    } else {\n      this.props.animeService.getOngoings(14).then(res => {\n        console.log(res);\n        this.props.ongoingsLoaded(res);\n      });\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.location !== prevProps.location) {\n      const {\n        search\n      } = qs.parse(this.props.location.search, {\n        ignoreQueryPrefix: true\n      });\n      this.props.ongoingsRequested();\n\n      if (search) {\n        this.props.animeService.searchAnimes(search, 30).then(res => this.props.ongoingsLoaded(res));\n      } else {\n        this.props.animeService.getOngoings(14).then(res => {\n          console.log(res);\n          this.props.ongoingsLoaded(res);\n        });\n      }\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(AnimeList, {\n      animes: this.props.animes\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 16\n    }, this);\n  }\n\n}\n\nconst mapStatetoProps = ({\n  animeList: {\n    animes,\n    loading,\n    error\n  }\n}) => {\n  return {\n    animes,\n    loading,\n    error\n  };\n};\n\nexport default withRouter(withAnimeService()(connect(mapStatetoProps, actions)(AnimeListContainer)));\n\nvar _c;\n\n$RefreshReg$(_c, \"AnimeList\");","map":{"version":3,"sources":["/Users/aleksandrgolomazov/anime_project/src/components/anime-list/anime-list.js"],"names":["React","Component","AnimeListItem","connect","withAnimeService","actions","withRouter","qs","AnimeList","animes","map","anime","name","image","id","AnimeListContainer","componentDidMount","console","log","props","location","ongoingsRequested","search","parse","ignoreQueryPrefix","animeService","searchAnimes","then","res","ongoingsLoaded","getOngoings","componentDidUpdate","prevProps","render","mapStatetoProps","animeList","loading","error"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport './anime-list.css';\nimport AnimeListItem from \"../anime-list-item\";\nimport { connect } from \"react-redux\";\nimport withAnimeService from \"../hoc\";\nimport * as actions from '../../actions'\nimport { withRouter } from \"react-router\";\nimport * as qs from 'qs';\n\n\nconst AnimeList = ({ animes }) => {\n    return (\n        <ul className=\"book-list\">\n\n            {\n                animes.map((anime) => {\n                    return (\n                        <li key={anime.id} >\n                            <AnimeListItem title={anime.name} image={anime.image} id={anime.id} />\n                        </li>\n                    )\n                })\n            }\n\n        </ul>\n    )\n}\n\nclass AnimeListContainer extends Component {\n    componentDidMount() {\n        console.log('DIDMOUNT')\n        console.log(this.props.location)\n        this.props.ongoingsRequested()\n        const { search } = (qs.parse(this.props.location.search, { ignoreQueryPrefix: true }))\n\n        if (search) {\n            this.props.animeService.searchAnimes(search, 30).then(res => this.props.ongoingsLoaded(res))\n        }\n        else {\n            this.props.animeService.getOngoings(14).then(res => {\n                console.log(res)\n                this.props.ongoingsLoaded(res)\n            })\n\n        }\n\n    }\n\n    componentDidUpdate(prevProps) {\n        if (this.props.location !== prevProps.location) {\n            const { search } = (qs.parse(this.props.location.search, { ignoreQueryPrefix: true }))\n            this.props.ongoingsRequested()\n\n            if (search) {\n                this.props.animeService.searchAnimes(search, 30).then(res => this.props.ongoingsLoaded(res))\n            }\n            else {\n                this.props.animeService.getOngoings(14).then(res => {\n                    console.log(res)\n                    this.props.ongoingsLoaded(res)\n                })\n\n            }\n        }\n\n\n\n    }\n    render() {\n        return <AnimeList animes={this.props.animes} />\n    }\n\n}\n\nconst mapStatetoProps = ({ animeList: { animes, loading, error } }) => {\n    return { animes, loading, error };\n};\n\n\nexport default withRouter(withAnimeService()(connect(mapStatetoProps, actions)(AnimeListContainer)))"]},"metadata":{},"sourceType":"module"}